import cv2
import numpy as np
import RPi.GPIO as GPIO
import time

# Initialize GPIO for robot arm
GPIO.setmode(GPIO.BCM)
servo1, servo2, servo3 = 9, 6, 5
GPIO.setup(servo1, GPIO.OUT)
GPIO.setup(servo2, GPIO.OUT)
GPIO.setup(servo3, GPIO.OUT)

s1 = GPIO.PWM(servo1, 50)
s2 = GPIO.PWM(servo2, 50)
s3 = GPIO.PWM(servo3, 50)

p1, p2, p3 = 10, 4, 7

s1.start(0)
s2.start(0)
s3.start(0)

# Initialize edge detection counter and control flags
edge_detection_count = 0
cleaning_in_progress = False
reset_time = None

# Video capture setup
cap = cv2.VideoCapture(0)
time.sleep(2)  # Allow camera to initialize

def perform_cleaning():
    global edge_detection_count, cleaning_in_progress, reset_time
    cleaning_in_progress = True
    
    # Perform cleaning actions
    s2.ChangeDutyCycle(p1)
    time.sleep(1)
    s2.ChangeDutyCycle(0)  # Reset to 0 to stop servo
    s3.ChangeDutyCycle(p2)
    time.sleep(1)
    s3.ChangeDutyCycle(0)  # Reset to 0 to stop servo
    s3.ChangeDutyCycle(p1)
    time.sleep(1)
    s3.ChangeDutyCycle(0)  # Reset to 0 to stop servo
    s3.ChangeDutyCycle(p2)
    time.sleep(1)
    s3.ChangeDutyCycle(0)  # Reset to 0 to stop servo
    s3.ChangeDutyCycle(p1)
    time.sleep(1)
    s3.ChangeDutyCycle(0)  # Reset to 0 to stop servo
    s2.ChangeDutyCycle(p3)
    time.sleep(1)
    s2.ChangeDutyCycle(0)  # Reset to 0 to stop servo
    
    edge_detection_count += 1
    cleaning_in_progress = False
    
    # If 3 cleaning cycles are completed, set reset_time
    if edge_detection_count >= 3:
        reset_time = time.time() + 5  # Wait for 5 seconds before resetting cycle

try:
    while True:
        current_time = time.time()
        if reset_time and current_time >= reset_time:
            # Reset cycle after waiting period
            edge_detection_count = 0
            reset_time = None
        
        if not cleaning_in_progress:
            ret, frame = cap.read()
            if not ret:
                break
            
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            blurred = cv2.GaussianBlur(gray, (3,3), 0)
            
            # Apply thresholding to the grayscale image
            ret, thresh = cv2.threshold(gray, 120, 255, cv2.THRESH_BINARY)
            
            edges = cv2.Canny(blurred, 100, 200)
            
            cv2.imshow('Live Video', frame)
            cv2.imshow('Edges', edges)
            cv2.imshow('Binary Threshold', thresh)  # Display binary thresholding result
            
            # If significant edges are detected and cleaning cycle isn't complete, perform cleaning
            if np.sum(edges) > 1000000:
                perform_cleaning()
                    
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
finally:
    cap.release()
    cv2.destroyAllWindows()
    s1.stop()
    s2.stop()
    s3.stop()
    GPIO.cleanup()
