import cv2
import numpy as np
import RPi.GPIO as GPIO
import time

# Initialize GPIO for robot arm
GPIO.setmode(GPIO.BCM)
servo1, servo2, servo3 = 9, 6, 5
GPIO.setup(servo1, GPIO.OUT)
GPIO.setup(servo2, GPIO.OUT)
GPIO.setup(servo3, GPIO.OUT)

s1 = GPIO.PWM(servo1, 50)
s2 = GPIO.PWM(servo2, 50)
s3 = GPIO.PWM(servo3, 50)

# Setup SimpleBlobDetector parameters.
params = cv2.SimpleBlobDetector_Params()
params.minThreshold = 10
params.maxThreshold = 200
params.filterByArea = True
params.minArea = 1500
params.filterByCircularity = True
params.minCircularity = 0.1
params.filterByConvexity = True
params.minConvexity = 0.87
params.filterByInertia = True
params.minInertiaRatio = 0.01

detector = cv2.SimpleBlobDetector_create(params)

p1, p2, p3 = 10, 4, 7

s1.start(0)
s2.start(0)
s3.start(0)

# Initialize edge detection counter and control flags
edge_detection_count = 0
cleaning_in_progress = False
reset_time = None

# Video capture setup
cap = cv2.VideoCapture(0)
time.sleep(2)  # Allow camera to initialize

def perform_cleaning():
    global edge_detection_count, cleaning_in_progress, reset_time
    cleaning_in_progress = True
   
    # Perform cleaning actions
    s2.ChangeDutyCycle(p1)
    time.sleep(1)
    s2.ChangeDutyCycle(0)
    s3.ChangeDutyCycle(p2)
    time.sleep(1)
    s3.ChangeDutyCycle(0)
    s3.ChangeDutyCycle(p1)
    time.sleep(1)
    s3.ChangeDutyCycle(0)
    s3.ChangeDutyCycle(p2)
    time.sleep(1)
    s3.ChangeDutyCycle(0)
    s3.ChangeDutyCycle(p1)
    time.sleep(1)
    s3.ChangeDutyCycle(0)
    s2.ChangeDutyCycle(p3)
    time.sleep(1)
    s2.ChangeDutyCycle(0)
   
    edge_detection_count += 1
    cleaning_in_progress = False
   
    # If 3 cleaning cycles are completed, reset
    if edge_detection_count >= 3:
        reset_time = time.time() + 5

def perform_more_cleaning(iterations=5):
    global cleaning_in_progress
    cleaning_in_progress = True
   
    for _ in range(iterations):
        # Perform additional cleaning actions tailored for stain detection
        print("Performing stain cleaning")
        s2.ChangeDutyCycle(p1)
        time.sleep(1)
        s2.ChangeDutyCycle(0)
        s3.ChangeDutyCycle(p2)
        time.sleep(1)
        s3.ChangeDutyCycle(0)
        s3.ChangeDutyCycle(p1)
        time.sleep(1)
        s3.ChangeDutyCycle(0)
        s3.ChangeDutyCycle(p2)
        time.sleep(1)
        s3.ChangeDutyCycle(0)
        s3.ChangeDutyCycle(p1)
        time.sleep(1)
        s3.ChangeDutyCycle(0)
        s2.ChangeDutyCycle(p3)
        time.sleep(1)
        s2.ChangeDutyCycle(0)
       
    cleaning_in_progress = False

try:
    while True:
        if reset_time and time.time() >= reset_time:
            edge_detection_count = 0
            reset_time = None
       
        if not cleaning_in_progress:
            ret, frame = cap.read()
            if not ret:
                break
           
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            blurred = cv2.GaussianBlur(gray, (3,3), 0)
            ret, thresh = cv2.threshold(gray, 120, 255, cv2.THRESH_BINARY)
            keypoints = detector.detect(thresh)
            im_with_keypoints = cv2.drawKeypoints(frame, keypoints, np.array([]), (0, 0, 255),
                                              cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)
            edges = cv2.Canny(blurred, 100, 200)
            cv2.imshow('Live Video', frame)
            cv2.imshow('Edges', edges)
            cv2.imshow('Binary Threshold', thresh)
            cv2.imshow("Blob Detection", im_with_keypoints)
           
            if (np.sum(edges) > 1000000) and (20000000 < np.sum(thresh) < 40000000):
                perform_cleaning()
            # Check for stain detection condition
            elif (np.sum(edges) > 1000000) and (20000000 < np.sum(thresh) < 40000000) and keypoints is not None:
                perform_more_cleaning(iterations=5)
       
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
finally:
    cap.release()
    cv2.destroyAllWindows()
    s1.stop()
    s2.stop()
    s3.stop()
    GPIO.cleanup()
