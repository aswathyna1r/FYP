import cv2
import numpy as np
import RPi.GPIO as GPIO
import time

# Initialize GPIO for both robot arm and chassis
GPIO.setmode(GPIO.BCM)

# Robot arm setup
servo1, servo2, servo3 = 9, 6, 5
GPIO.setup(servo1, GPIO.OUT)
GPIO.setup(servo2, GPIO.OUT)
GPIO.setup(servo3, GPIO.OUT)

s1 = GPIO.PWM(servo1, 50)
s2 = GPIO.PWM(servo2, 50)
s3 = GPIO.PWM(servo3, 50)

# Robot chassis setup
ENA, ENB = 13, 20
IN1, IN2, IN3, IN4 = 19, 16, 21, 26

GPIO.setup(ENA, GPIO.OUT, initial=GPIO.LOW)
GPIO.setup(ENB, GPIO.OUT, initial=GPIO.LOW)
GPIO.setup(IN1, GPIO.OUT, initial=GPIO.LOW)
GPIO.setup(IN2, GPIO.OUT, initial=GPIO.LOW)
GPIO.setup(IN3, GPIO.OUT, initial=GPIO.LOW)
GPIO.setup(IN4, GPIO.OUT, initial=GPIO.LOW)

# PWM setup for chassis motors
motor1 = GPIO.PWM(ENA, 100)
motor2 = GPIO.PWM(ENB, 100)
motor1.start(0)
motor2.start(0)

# SimpleBlobDetector parameters
params = cv2.SimpleBlobDetector_Params()
params.minThreshold = 10
params.maxThreshold = 200
params.filterByArea = True
params.minArea = 1500
params.filterByCircularity = True
params.minCircularity = 0.1
params.filterByConvexity = True
params.minConvexity = 0.87
params.filterByInertia = True
params.minInertiaRatio = 0.01
detector = cv2.SimpleBlobDetector_create(params)

# Control flags and counters
edge_detection_count = 0
cleaning_in_progress = False
reset_time = None

p1, p2, p3 = 10, 4, 7  # Servo positions
s1.start(0)
s2.start(0)
s3.start(0)

# Function definitions for robot chassis movement
def Move_Forward(power=100, duration=None):
    motor1.ChangeDutyCycle(power)
    motor2.ChangeDutyCycle(power)
    GPIO.output(IN1, GPIO.HIGH)
    GPIO.output(IN2, GPIO.LOW)
    GPIO.output(IN3, GPIO.HIGH)
    GPIO.output(IN4, GPIO.LOW)
    if duration:
        time.sleep(duration)
        Stop()

def Stop():
    motor1.ChangeDutyCycle(0)
    motor2.ChangeDutyCycle(0)
    GPIO.output(IN1, GPIO.LOW)
    GPIO.output(IN2, GPIO.LOW)
    GPIO.output(IN3, GPIO.LOW)
    GPIO.output(IN4, GPIO.LOW)

# Adjust this function to move the robot chassis 20cm
def move_chassis_20cm():
    Move_Forward(power=75, duration=2)  # Adjust power and duration to match your robot's speed and required distance

# Video capture setup
cap = cv2.VideoCapture(0)
time.sleep(2)

try:
    while True:
        if reset_time and time.time() >= reset_time:
            # After completing a cleaning cycle, move the robot chassis
            move_chassis_20cm()
            # Reset cycle after moving
            edge_detection_count = 0
            reset_time = None
       
        if not cleaning_in_progress:
            ret, frame = cap.read()
            if not ret:
                break
           
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            blurred = cv2.GaussianBlur(gray, (3,3), 0)
            ret, thresh = cv2.threshold(gray, 120, 255, cv2.THRESH_BINARY)
            edges = cv2.Canny(blurred, 100, 200)
            cv2.imshow('Live Video', frame)
            cv2.imshow('Edges', edges)
            cv2.imshow('Binary Threshold', thresh)
       
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
finally:
    cap.release()
    cv2.destroyAllWindows()
    s1.stop()
    s2.stop()
    s3.stop()
    motor1.stop()
    motor2.stop()
    GPIO.cleanup()
